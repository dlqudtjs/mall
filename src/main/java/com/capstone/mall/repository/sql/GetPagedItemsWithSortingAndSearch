CREATE PROCEDURE GetPagedItemsWithSortingAndSearch(
    IN pageNum INT,
    IN pageSize INT,
    IN sortType CHAR(1),
    IN search VARCHAR(255)
)
BEGIN
    DECLARE startRowIndex INT;

    SET startRowIndex = (pageNum - 1) * pageSize;

    IF sortType = 'n' THEN
        -- 최신순 정렬
        SELECT
            i.item_id,
            i.name,
            i.image_1,
            i.price,
            i.created_at,
            i.updated_at,
            COUNT(r.review_id) AS item_review_count,
            ROUND(AVG(r.rate), 1) AS item_avg_review,
            COALESCE(COUNT(CASE WHEN od.result = 3 THEN 1 ELSE NULL END), 0) AS sales,
            i.stock
        FROM
            item i
        LEFT JOIN
            review r ON i.item_id = r.item_id
        LEFT JOIN
            orderDetail od ON i.item_id = od.item_id
        WHERE
            i.item_id IN (SELECT item_id FROM item_keyword WHERE keyword = search)
        GROUP BY
            i.item_id, i.name
        ORDER BY
            i.created_at DESC
        LIMIT startRowIndex, pageSize;
    ELSEIF sortType = 'r' THEN
        -- 별점순 정렬
        SELECT
            i.item_id,
            i.name,
            i.image_1,
            i.price,
            i.created_at,
            i.updated_at,
            COUNT(r.review_id) AS item_review_count,
            ROUND(AVG(r.rate), 1) AS item_avg_review,
            COALESCE(COUNT(CASE WHEN od.result = 3 THEN 1 ELSE NULL END), 0) AS sales,
            i.stock
        FROM
            item i
        LEFT JOIN
            review r ON i.item_id = r.item_id
        LEFT JOIN
            orderDetail od ON i.item_id = od.item_id
        WHERE
            i.item_id IN (SELECT item_id FROM item_keyword WHERE keyword = search)
        GROUP BY
            i.item_id, i.name
        ORDER BY
            item_avg_review DESC
        LIMIT startRowIndex, pageSize;
    ELSEIF sortType = 'lp' THEN
        -- 낮은 가격순 정렬
        SELECT
            i.item_id,
            i.name,
            i.image_1,
            i.price,
            i.created_at,
            i.updated_at,
            COUNT(r.review_id) AS item_review_count,
            ROUND(AVG(r.rate), 1) AS item_avg_review,
            COALESCE(COUNT(CASE WHEN od.result = 3 THEN 1 ELSE NULL END), 0) AS sales,
            i.stock
        FROM
            item i
        LEFT JOIN
            review r ON i.item_id = r.item_id
        LEFT JOIN
            orderDetail od ON i.item_id = od.item_id
        WHERE
            i.item_id IN (SELECT item_id FROM item_keyword WHERE keyword = search)
        GROUP BY
            i.item_id, i.name
        ORDER BY
            i.price ASC
        LIMIT startRowIndex, pageSize;
    ELSEIF sortType = 'hp' THEN
        -- 높은 가격순 정렬
        SELECT
            i.item_id,
            i.name,
            i.image_1,
            i.price,
            i.created_at,
            i.updated_at,
            COUNT(r.review_id) AS item_review_count,
            ROUND(AVG(r.rate), 1) AS item_avg_review,
            COALESCE(COUNT(CASE WHEN od.result = 3 THEN 1 ELSE NULL END), 0) AS sales,
            i.stock
        FROM
            item i
        LEFT JOIN
            review r ON i.item_id = r.item_id
        LEFT JOIN
            orderDetail od ON i.item_id = od.item_id
        WHERE
            i.item_id IN (SELECT item_id FROM item_keyword WHERE keyword = search)
        GROUP BY
            i.item_id, i.name
        ORDER BY
            i.price DESC
        LIMIT startRowIndex, pageSize;
    ELSEIF sortType = 's' THEN
        -- 판매량 순 정렬
        SELECT
            i.item_id,
            i.name,
            i.image_1,
            i.price,
            i.created_at,
            i.updated_at,
            COUNT(r.review_id) AS item_review_count,
            ROUND(AVG(r.rate), 1) AS item_avg_review,
            COALESCE(COUNT(CASE WHEN od.result = 3 THEN 1 ELSE NULL END), 0) AS sales,
            i.stock
        FROM
            item i
        LEFT JOIN
            review r ON i.item_id = r.item_id
        LEFT JOIN
            orderDetail od ON i.item_id = od.item_id
        WHERE
            i.item_id IN (SELECT item_id FROM item_keyword WHERE keyword = search)
        GROUP BY
            i.item_id, i.name
        ORDER BY
            sales DESC
        LIMIT startRowIndex, pageSize;
    END IF;
END;
